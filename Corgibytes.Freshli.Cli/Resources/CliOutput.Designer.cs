//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corgibytes.Freshli.Cli.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CliOutput {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CliOutput() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Corgibytes.Freshli.Cli.Resources.CliOutput", typeof(CliOutput).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No detected agents found.
        /// </summary>
        internal static string AgentsDetectCommandRunner_Run_No_detected_agents_found {
            get {
                return ResourceManager.GetString("AgentsDetectCommandRunner_Run_No_detected_agents_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File {0} does not exist.
        /// </summary>
        internal static string AgentsVerifier_VerifyFiles_File__0__does_not_exist {
            get {
                return ResourceManager.GetString("AgentsVerifier_VerifyFiles_File__0__does_not_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executing auth command handler.
        /// </summary>
        internal static string AuthCommand_AuthCommand_Executing_auth_command_handler {
            get {
                return ResourceManager.GetString("AuthCommand_AuthCommand_Executing_auth_command_handler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to workItem.Argument cannot be null.
        /// </summary>
        internal static string BackgroundTaskQueue_QueueBackgroundWorkItemAsync_workItem_Argument_cannot_be_null {
            get {
                return ResourceManager.GetString("BackgroundTaskQueue_QueueBackgroundWorkItemAsync_workItem_Argument_cannot_be_null" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to workItem.Invoker cannot be null.
        /// </summary>
        internal static string BackgroundTaskQueue_QueueBackgroundWorkItemAsync_workItem_Invoker_cannot_be_null {
            get {
                return ResourceManager.GetString("BackgroundTaskQueue_QueueBackgroundWorkItemAsync_workItem_Invoker_cannot_be_null", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation aborted. Cache not destroyed..
        /// </summary>
        internal static string CacheDestroyCommandRunner_Run_Abort {
            get {
                return ResourceManager.GetString("CacheDestroyCommandRunner_Run_Abort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destroying the cache at {0}..
        /// </summary>
        internal static string CacheDestroyCommandRunner_Run_Destroying {
            get {
                return ResourceManager.GetString("CacheDestroyCommandRunner_Run_Destroying", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to completely DELETE the directory {0}?.
        /// </summary>
        internal static string CacheDestroyCommandRunner_Run_Prompt {
            get {
                return ResourceManager.GetString("CacheDestroyCommandRunner_Run_Prompt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No repository with this hash exists in cache..
        /// </summary>
        internal static string CachedGitSourceRepository_No_Repository_Found_In_Cache {
            get {
                return ResourceManager.GetString("CachedGitSourceRepository_No_Repository_Found_In_Cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preparing cache at {0}..
        /// </summary>
        internal static string CachePrepareCommandRunner_Run_Preparing_cache {
            get {
                return ResourceManager.GetString("CachePrepareCommandRunner_Run_Preparing_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filepath should not be null or empty.
        /// </summary>
        internal static string ComputeLibYearCommandRunner_Run_FilePath_should_not_be_null_or_empty {
            get {
                return ResourceManager.GetString("ComputeLibYearCommandRunner_Run_FilePath_should_not_be_null_or_empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently installed.
        /// </summary>
        internal static string ComputeLibYearCommandRunner_Table_Header_Currently_Installed {
            get {
                return ResourceManager.GetString("ComputeLibYearCommandRunner_Table_Header_Currently_Installed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Latest available.
        /// </summary>
        internal static string ComputeLibYearCommandRunner_Table_Header_Latest_Available {
            get {
                return ResourceManager.GetString("ComputeLibYearCommandRunner_Table_Header_Latest_Available", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package.
        /// </summary>
        internal static string ComputeLibYearCommandRunner_Table_Header_Package {
            get {
                return ResourceManager.GetString("ComputeLibYearCommandRunner_Table_Header_Package", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Released at.
        /// </summary>
        internal static string ComputeLibYearCommandRunner_Table_Header_Released_at {
            get {
                return ResourceManager.GetString("ComputeLibYearCommandRunner_Table_Header_Released_at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This directory is not a Freshli cache. Directory not destroyed..
        /// </summary>
        internal static string Exception_Cache_Destroy_NonCache {
            get {
                return ResourceManager.GetString("Exception_Cache_Destroy_NonCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use an existing non-empty directory as a cache directory..
        /// </summary>
        internal static string Exception_Cache_Prepare_NonEmpty {
            get {
                return ResourceManager.GetString("Exception_Cache_Prepare_NonEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Git encountered an error:.
        /// </summary>
        internal static string Exception_Git_EncounteredError {
            get {
                return ResourceManager.GetString("Exception_Git_EncounteredError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No repository with this hash exists in cache..
        /// </summary>
        internal static string Exception_Git_NoRepoWithHash {
            get {
                return ResourceManager.GetString("Exception_Git_NoRepoWithHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Git encountered an error: {0}.
        /// </summary>
        internal static string GitArchive_Git_Exception {
            get {
                return ResourceManager.GetString("GitArchive_Git_Exception", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manages the local cache database and directory.
        /// </summary>
        internal static string Help_CacheCommand_Description {
            get {
                return ResourceManager.GetString("Help_CacheCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t prompt to confirm destruction of cache.
        /// </summary>
        internal static string Help_CacheDestoyCommand_Option_Force {
            get {
                return ResourceManager.GetString("Help_CacheDestoyCommand_Option_Force", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes the Freshli cache.
        /// </summary>
        internal static string Help_CacheDestroyCommand_Description {
            get {
                return ResourceManager.GetString("Help_CacheDestroyCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensures the cache directory exists and contains a valid cache database.
        /// </summary>
        internal static string Help_CachePrepareCommand_Description {
            get {
                return ResourceManager.GetString("Help_CachePrepareCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL to the repository to clone.
        /// </summary>
        internal static string Help_GitCloneCommand_Argument_Repo_Url {
            get {
                return ResourceManager.GetString("Help_GitCloneCommand_Argument_Repo_Url", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clone a repository for Freshli to examine.
        /// </summary>
        internal static string Help_GitCloneCommand_Description {
            get {
                return ResourceManager.GetString("Help_GitCloneCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The branch to check out on the repository.
        /// </summary>
        internal static string Help_GitCloneCommand_Option_Branch {
            get {
                return ResourceManager.GetString("Help_GitCloneCommand_Option_Branch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the Git executable to use.
        /// </summary>
        internal static string Help_GitCloneCommand_Option_Git_Path {
            get {
                return ResourceManager.GetString("Help_GitCloneCommand_Option_Git_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses git to traverse through a repository&apos;s history.
        /// </summary>
        internal static string Help_GitCommand_Description {
            get {
                return ResourceManager.GetString("Help_GitCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root Command.
        /// </summary>
        internal static string Help_MainCommand_Description {
            get {
                return ResourceManager.GetString("Help_MainCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location for storing temporary files.
        /// </summary>
        internal static string Help_Option_CacheDir_Description {
            get {
                return ResourceManager.GetString("Help_Option_CacheDir_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source code repository path.
        /// </summary>
        internal static string Help_ScanCommand_Argument_Path {
            get {
                return ResourceManager.GetString("Help_ScanCommand_Argument_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns metrics results for given local repository path.
        /// </summary>
        internal static string Help_ScanCommand_Description {
            get {
                return ResourceManager.GetString("Help_ScanCommand_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies how to format output. Case insensitive..
        /// </summary>
        internal static string Help_ScanCommand_Option_Format {
            get {
                return ResourceManager.GetString("Help_ScanCommand_Option_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies how to output result. Case insensitive. Supports multiple values..
        /// </summary>
        internal static string Help_ScanCommand_Option_Output {
            get {
                return ResourceManager.GetString("Help_ScanCommand_Option_Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root Command Executed.
        /// </summary>
        internal static string MainCommand_MainCommand_Root_Command_Executed {
            get {
                return ResourceManager.GetString("MainCommand_MainCommand_Root_Command_Executed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Date (yyyy-MM-dd).
        /// </summary>
        internal static string Output_Date {
            get {
                return ResourceManager.GetString("Output_Date", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LibYear.
        /// </summary>
        internal static string Output_LibYear {
            get {
                return ResourceManager.GetString("Output_LibYear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipped.
        /// </summary>
        internal static string Output_Skipped {
            get {
                return ResourceManager.GetString("Output_Skipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UpgradesAvailable.
        /// </summary>
        internal static string Output_UpgradesAvailable {
            get {
                return ResourceManager.GetString("Output_UpgradesAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File {0} does not exist.
        /// </summary>
        internal static string PrepareCacheMessageHandler_Run_Preparing_cache {
            get {
                return ResourceManager.GetString("PrepareCacheMessageHandler_Run_Preparing_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not read file, as no file path was given.
        /// </summary>
        internal static string ReadCycloneDxFile_Exception_Can_Not_Read_File {
            get {
                return ResourceManager.GetString("ReadCycloneDxFile_Exception_Can_Not_Read_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executing scan command handler.
        /// </summary>
        internal static string ScanCommand_ScanCommand_Executing_scan_command_handler {
            get {
                return ResourceManager.GetString("ScanCommand_ScanCommand_Executing_scan_command_handler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path should not be null or empty.
        /// </summary>
        internal static string ScanCommandRunner_Run_Path_should_not_be_null_or_empty {
            get {
                return ResourceManager.GetString("ScanCommandRunner_Run_Path_should_not_be_null_or_empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache directory already destroyed or does not exist..
        /// </summary>
        internal static string Warning_Cache_Destroy_DoesNotExist {
            get {
                return ResourceManager.GetString("Warning_Cache_Destroy_DoesNotExist", resourceCulture);
            }
        }
    }
}

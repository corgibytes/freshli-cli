name: .NET Core

on:
  push:
    branches: [ main, release* ]
    tags: [ v* ]
  pull_request:
    branches: [ main, release* ]

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      BUILD_ARTIFACTS_FOLDER: build_artifacts

    steps:
      - name: "[Setup] - Checkout code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for GitVersion
          submodules: 'recursive'

      - name: "[Setup] - .NET Core"
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: "[Setup] - Install GitVersion"
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.10.3'

      - name: "[Setup] - Install GitReleaseManager"
        if: ${{ github.event_name == 'push' }}
        uses: gittools/actions/gitreleasemanager/setup@v0.9.13
        with:
          versionSpec: '0.13.0'

      - name: "[Setup] - Install Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1 # Not needed with a .ruby-version file
          bundler-cache: true

      - name: "[Setup] - Java" # required to build/install `freshli-agent-java`
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: "[Versioning] - GitVersion Config"
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          useConfigFile: true
          additionalArguments: '/showConfig'

      - name: "[Versioning] - Determine Version"
        uses: gittools/actions/gitversion/execute@v0.9.13
        id: gitversion
        with:
          useConfigFile: true

      - name: "[Versioning] - Update csproj Files"
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          useConfigFile: true
          additionalArguments: '/updateprojectfiles'

      - name: "[Versioning] -  Display updated csproj File"
        run: cat Corgibytes.Freshli.Cli/Corgibytes.Freshli.Cli.csproj

      # If there are no closed issues generating the Github Release will fail because it raises an exception.
      # Work around this by checking for success or no closed issue errors.
      - name: "[Draft Release] - Create/Update GitHub Release ${{ steps.gitversion.outputs.majorMinorPatch }}"
        if: ${{ github.event_name == 'push' }}
        run: |
          dotnet-gitreleasemanager create --owner corgibytes --repository freshli-cli --token ${{ secrets.GITHUB_TOKEN }} --milestone v${{ steps.gitversion.outputs.majorMinorPatch }} --logFilePath output.txt || true
          cat output.txt | grep 'No closed issues have been found for milestone\|Drafted release is available at'

      # This will generate the change log for all the GitHub Releases, feature
      # is not included in the GitReleaseManager action yet.
      - name: "[Draft Release] - Generate Change Log"
        if: ${{ github.event_name == 'push' }}
        run: |
          dotnet-gitreleasemanager export --token ${{ secrets.GITHUB_TOKEN }} -o 'corgibytes' -r 'freshli-cli' -f 'CHANGELOG.md'
          git add --renormalize CHANGELOG.md
          cat CHANGELOG.md

      - name: "[Draft Release] - Commit Change Log and if it Changed"
        if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Committing auto generated change log.
          file_pattern: CHANGELOG.md

      - name: "[Build] - Build"
        run: dotnet build --configuration Release

      - name: "[Build] - Copy NuGet Package to Build Artifacts"
        run: |
          mkdir ${{ env.BUILD_ARTIFACTS_FOLDER }}
          cp Corgibytes.Freshli.Cli/bin/Release/Corgibytes.Freshli.Cli.${{ steps.gitversion.outputs.NuGetVersionV2 }}.nupkg ${{ env.BUILD_ARTIFACTS_FOLDER }}
          ls -la ${{ env.BUILD_ARTIFACTS_FOLDER }}
          echo "NUGET_PACKAGE_FILE=Corgibytes.Freshli.Cli.${{ steps.gitversion.outputs.NuGetVersionV2 }}.nupkg" >> $GITHUB_ENV
          echo "NUGET_PACKAGE_PATH=${{ env.BUILD_ARTIFACTS_FOLDER }}/Corgibytes.Freshli.Cli.${{ steps.gitversion.outputs.NuGetVersionV2 }}.nupkg" >> $GITHUB_ENV

      - name: "[Build] - Setup for Acceptance Test Coverage Collection, and for running the linters"
        run: |
          dotnet tool restore

      - name: "[Lint] - Install eclint"
        env:
          ECLINT_VERSION: 0.3.3
        run: |
          curl -L https://gitlab.com/greut/eclint/-/releases/v$ECLINT_VERSION/downloads/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz -o /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz && \
          mkdir -p $HOME/.local/opt/eclint && \
          tar -zxvf /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz -C $HOME/.local/opt/eclint && \
          rm /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz
          echo "$HOME/.local/opt/eclint" >> $GITHUB_PATH

      - name: "[Lint] - Run all linters"
        run: |
          bin/lint.rb

      - name: "[Test] - Install freshli-agent-java"
        run: |
          mkdir -p /tmp/freshli-agent-java && \
          cd /tmp/freshli-agent-java && \
          git clone https://github.com/corgibytes/freshli-agent-java && \
          cd freshli-agent-java && \
          ./gradlew installDist && \
          sudo mkdir -p /usr/local/share/freshli-agent-java && \
          cp -r build/install/freshli-agent-java /usr/local/share/freshli-agent-java && \
          ln -s /usr/local/share/freshli-agent-java/bin/freshli-agent-java /usr/local/bin/freshli-agent-java && \
          rm -rf /tmp/freshli-agent-java

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true

      - name: "[Test] - Test, Generate Code Coverage"
        run: |
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov

      - name: "[Test] - Setup for Behavior Acceptance Tests"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1 # Not needed with a .ruby-version file
          bundler-cache: true

      - name: "[Test] - Behavior Acceptance Tests with Coverage Collection"
        run: |
          dotnet build -o exe && dotnet coverlet ./exe --target "bundle" --targetargs "exec cucumber" --output ./coverage-acceptance.info --format lcov

      - name: "[Test] - Send Code Coverage Data to Code Climate"
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{github.workspace}}/Corgibytes.Freshli.Cli.Test/coverage.info
            ${{github.workspace}}/coverage-acceptance.info

      - name: "[Publish] - Publish win-x64, linux-x64 and osx-x64"
        run: |
          dotnet publish -r win-x64 -c Release --self-contained false
          dotnet publish -r linux-x64 -c Release --self-contained false
          dotnet publish -r osx-x64 -c Release --self-contained false

      - name: "[Post Publish] - Zip win-x64 Release"
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net6.0/win-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-win-x64.zip

      - name: "[Post Publish] - Zip linux-x64 Release"
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net6.0/linux-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-linux-x64.zip

      - name: "[Post Publish] - Zip osx-x64 Release"
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net6.0/osx-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-osx-x64.zip

      - name: "[Post Publish] - View Build Artifacts Folder"
        run: ls -la ${{ env.BUILD_ARTIFACTS_FOLDER }}

      - name: "[Post Publish] - Upload win-x64 Assets as Github Workflow Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-win-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-win-x64.zip

      - name: "[Post Publish] - Upload linux-x64 Assets as Github Workflow Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-linux-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-linux-x64.zip

      - name: "[Post Publish] - Upload osx-x64 Assets as Github Workflow Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-osx-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-osx-x64.zip

      - name: "[Post Publish] - Upload NuGet Package as Github Workflow Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NUGET_PACKAGE_FILE }}
          path: ${{ env.NUGET_PACKAGE_PATH }}

      - name: "[Post Publish] - Add Assets to Release Draft"
        if: github.event_name == 'push'
        run: |
          dotnet-gitreleasemanager addasset \
            --owner corgibytes \
            --repository freshli-cli \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --targetDirectory /home/runner/work/freshli-cli/freshli-cli \
            --tagName 'v${{ steps.gitversion.outputs.majorMinorPatch }}' \
            --assets ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-win-x64.zip,${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-linux-x64.zip,${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-osx-x64.zip,${{ env.NUGET_PACKAGE_PATH }}

      # Push all versions to GitHub packages.  This includes alpha version, in the main branch, and beta
      # versions in the release branch.
      - name: "[Push] - Push to GitHub"
        if: github.event_name == 'push'
        run: dotnet nuget push ${{ env.NUGET_PACKAGE_PATH }} -k ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --no-symbols -s https://nuget.pkg.github.com/corgibytes/index.json

      # Only push production or release candidates to Nuget.org.  These will be tagged.
      - name: "[Push] - Push to NuGet"
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: dotnet nuget push ${{ env.NUGET_PACKAGE_PATH }} -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate --no-symbols -s https://api.nuget.org/v3/index.json

name: .NET Core

on:
  push:
    branches: [ main, release* ]
    tags: [ v* ]
  pull_request:
    branches: [ main, release* ]

env:
  ECLINT_VERSION: "0.3.3"
  _JAVA_OPTIONS: "-Xms10m -Xmx1024m"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest-32-cores, windows-latest-32-cores]

    runs-on: ${{ matrix.os }}
    env:
      BUILD_ARTIFACTS_FOLDER: build_artifacts

    steps:
      - name: "[Setup] - Check null device status (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          sc query null

      - name: "[Setup] - Checkout code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for GitVersion
          submodules: 'recursive'

      - name: "[Setup] - .NET Core"
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json

      - name: "[Setup] - Install GitVersion"
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.10.3'

      - name: "[Setup] - Install Ruby"
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: "[Setup] - Java" # required to build/install `freshli-agent-java`
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: "[Versioning] - GitVersion Config"
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          useConfigFile: true
          additionalArguments: '/showConfig'

      - name: "[Versioning] - Determine Version"
        uses: gittools/actions/gitversion/execute@v0.9.15
        id: gitversion
        with:
          useConfigFile: true

      - name: "[Versioning] - Update csproj Files"
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          useConfigFile: true
          additionalArguments: '/updateprojectfiles'

      - name: "[Versioning] -  Display updated csproj File"
        run: cat Corgibytes.Freshli.Cli/Corgibytes.Freshli.Cli.csproj

      - name: "[Build] - Build"
        run: dotnet build --configuration Release

      - name: "[Build, Docker] - Set up QEMU"
        if: ${{ startsWith(github.ref, 'refs/tags/v') && runner.os != 'Windows' }}
        uses: docker/setup-qemu-action@v2

      - name: "[Build, Docker] - Set up Docker Buildx"
        if: ${{ startsWith(github.ref, 'refs/tags/v') && runner.os != 'Windows' }}
        uses: docker/setup-buildx-action@v2

      - name: "[Build, Docker] - Login to DockerHub"
        if: ${{ startsWith(github.ref, 'refs/tags/v') && runner.os != 'Windows' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "[Build, Docker] - Build and push"
        if: {{ startsWith(github.ref, 'refs/tags/v') && runner.os != 'Windows' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags:
            corgibytes/freshli-cli:latest,
            corgibytes/freshli-cli:${{ steps.gitversion.outputs.majorMinorPatch }},
            corgibytes/freshli-cli:${{ steps.gitversion.outputs.semVer }}-${{ steps.gitversion.outputs.fullBuildMetadata }}
          cache-from: type=registry,ref=corgibytes/freshli-cli:buildcache
          cache-to: type=registry,ref=corgibytes/freshli-cli:buildcache,mode=max

      - name: "[Build] - Setup for Acceptance Test Coverage Collection, and for running the linters"
        run: |
          dotnet tool restore

      - name: "[Build] - dotnet build"
        run: |
          dotnet build -o exe

      - name: "[Lint] - Install eclint on Linux"
        if: runner.os != 'Windows'
        run: |
          curl -L https://gitlab.com/greut/eclint/-/releases/v$ECLINT_VERSION/downloads/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz -o /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz && \
          mkdir -p $HOME/.local/opt/eclint && \
          tar -zxvf /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz -C $HOME/.local/opt/eclint && \
          rm /tmp/eclint_${ECLINT_VERSION}_linux_x86_64.tar.gz
          echo "$HOME/.local/opt/eclint" >> $GITHUB_PATH

      - name: "[Lint] - Install eclint on Windows"
        if: runner.os == 'Windows'
        run: |
          New-Item -Type Directory -Force $HOME\.local\opt\eclint
          Invoke-WebRequest -Uri https://gitlab.com/greut/eclint/-/releases/v$env:ECLINT_VERSION/downloads/eclint_${env:ECLINT_VERSION}_windows_x86_64.tar.gz -OutFile $HOME\.local\opt\eclint\eclint_${env:ECLINT_VERSION}_windows_x86_64.tar.gz
          Set-Location $HOME\.local\opt\eclint
          tar -zxvf .\eclint_${env:ECLINT_VERSION}_windows_x86_64.tar.gz
          Write-Output "$HOME\.local\opt\eclint" | Out-File -Append $env:GITHUB_PATH

      - name: "[Lint] - Run all linters"
        run: |
          ruby bin/lint.rb

      - name: "[Test] - Install freshli-agent-java on Linux"
        if: runner.os != 'Windows'
        run: |
          mkdir -p $HOME/.local/opt
          cd $HOME/.local/opt
          git clone https://github.com/corgibytes/freshli-agent-java
          cd freshli-agent-java
          ./gradlew installDist
          chmod a-x build/install/freshli-agent-java/bin/freshli-agent-java.bat
          echo "$HOME/.local/opt/freshli-agent-java/build/install/freshli-agent-java/bin" >> $GITHUB_PATH

      - name: "[Test] - Install freshli-agent-java on Windows"
        if: runner.os == 'Windows'
        run: |
          New-Item -Type Directory -Force $HOME\.local\opt
          Set-Location $HOME\.local\opt
          git clone https://github.com/corgibytes/freshli-agent-java
          Set-Location .\freshli-agent-java
          .\gradlew installDist
          Write-Output "$HOME\.local\opt\freshli-agent-java\build\install\freshli-agent-java\bin" | Out-File -Append $env:GITHUB_PATH

      - name: "[Test] - Confirm freshli-agent-java availability"
        run: |
          freshli-agent-java --help

      - name: "[Test] - Test, Generate Code Coverage"
        run: |
          dotnet coverlet ./exe --target "dotnet" --targetargs "test exe/Corgibytes.Freshli.Cli.Test.dll" --format lcov

      - name: "[Test] - Behavior Acceptance Tests"
        run: |
          bundle exec cucumber

      - name: "[Test] - Send Code Coverage Data to Code Climate"
        uses: paambaati/codeclimate-action@v3.2.0
        if: ${{ github.actor != 'dependabot[bot]' && runner.os != 'Windows' }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{github.workspace}}/coverage.info:lcov

      - name: "[Publish] - Publish win-x64, linux-x64 and osx-x64"
        if: runner.os != 'Windows'
        run: |
          dotnet publish -r win-x64 -c Release --self-contained false
          dotnet publish -r linux-x64 -c Release --self-contained false
          dotnet publish -r osx-x64 -c Release --self-contained false

      - name: "[Post Publish] - Zip win-x64 Release"
        if: runner.os != 'Windows'
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net7.0/win-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-win-x64.zip

      - name: "[Post Publish] - Zip linux-x64 Release"
        if: runner.os != 'Windows'
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net7.0/linux-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-linux-x64.zip

      - name: "[Post Publish] - Zip osx-x64 Release"
        if: runner.os != 'Windows'
        uses: papeloto/action-zip@v1
        with:
          files: Corgibytes.Freshli.Cli/bin/Release/net7.0/osx-x64/publish
          dest: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-osx-x64.zip

      - name: "[Post Publish] - View Build Artifacts Folder"
        if: runner.os != 'Windows'
        run: ls -la ${{ env.BUILD_ARTIFACTS_FOLDER }}

      - name: "[Post Publish] - Upload win-x64 Assets as Github Workflow Artifacts"
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-win-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-win-x64.zip

      - name: "[Post Publish] - Upload linux-x64 Assets as Github Workflow Artifacts"
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-linux-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-linux-x64.zip

      - name: "[Post Publish] - Upload osx-x64 Assets as Github Workflow Artifacts"
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-alpha-osx-x64.zip
          path: ${{ env.BUILD_ARTIFACTS_FOLDER }}/freshli-cli-${{ steps.gitversion.outputs.majorMinorPatch }}-osx-x64.zip
